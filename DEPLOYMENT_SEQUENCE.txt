SPARK RAT - COMPLETE DEPLOYMENT SEQUENCE

⚠️ FOLLOW THIS EXACT ORDER - DO NOT SKIP STEPS ⚠️

═══════════════════════════════════════════════════════════
PART 1: PRE-DEPLOYMENT VERIFICATION
═══════════════════════════════════════════════════════════

[ ] 1.1 - Verify go.mod shows "go 1.21" (not 1.24)
Command: grep "^go " spark-setup/spark-backend/go.mod

[ ] 1.2 - Verify Dockerfile.simple contains wget
Command: grep "wget" spark-setup/spark-backend/Dockerfile.simple

[ ] 1.3 - Verify Dockerfile.simple contains HEALTHCHECK
Command: grep "HEALTHCHECK" spark-setup/spark-backend/Dockerfile.simple

[ ] 1.4 - Verify Dockerfile.simple copies config.json
Command: grep "config.json" spark-setup/spark-backend/Dockerfile.simple

[ ] 1.5 - Verify render.yaml env vars match config.json
Command: Read both files and compare salt and admin hash

[ ] 1.6 - Verify vercel.json has buildCommand
Command: grep "buildCommand" spark-setup/spark-frontend/vercel.json

[ ] 1.7 - Commit all fixes to git
Command: git add . && git commit -m "Fix deployment configurations"

═══════════════════════════════════════════════════════════
PART 2: BACKEND DEPLOYMENT (Render)
═══════════════════════════════════════════════════════════

[ ] 2.1 - Push changes to GitHub
Command: git push origin main

[ ] 2.2 - Go to Render dashboard
URL: https://dashboard.render.com/web/srv-d3u6cgripnbc738naa70

[ ] 2.3 - Unsuspend service (if suspended)
Click: "Unsuspend" or "Resume" button

[ ] 2.4 - Trigger manual deployment
Click: "Manual Deploy" > "Deploy latest commit"

[ ] 2.5 - Monitor build logs for errors
Watch: Build logs in Render dashboard
Expected: "Build successful" message after 3-5 minutes

[ ] 2.6 - Wait for deployment to complete
Status should change to: "Live"

[ ] 2.7 - Copy actual backend URL
Format: https://[service-name].onrender.com
Write it here: ________________________________

[ ] 2.8 - Test backend health endpoint
Command: curl https://[your-url]/api/health
Expected: {"status":"healthy"...}

[ ] 2.9 - Test device list endpoint
Command: curl https://[your-url]/api/device/list
Expected: {"code":0,"data":{}}

⚠️ DO NOT PROCEED TO PART 3 UNTIL BACKEND IS FULLY WORKING ⚠️

═══════════════════════════════════════════════════════════
PART 3: FRONTEND CONFIGURATION UPDATE
═══════════════════════════════════════════════════════════

[ ] 3.1 - Update vercel.json with actual backend URL
File: spark-setup/spark-frontend/vercel.json
Lines: 24-25
Replace: Old URL with actual Render URL from step 2.7

[ ] 3.2 - Update webpack.config.js with actual backend URL
File: spark-setup/spark-frontend/webpack.config.js
Lines: 72-73
Replace: Old URL with actual Render URL from step 2.7

[ ] 3.3 - Update backend.js with actual backend URL
File: spark-setup/spark-frontend/src/config/backend.js
Lines: 6-7
Replace: Old URL with actual Render URL from step 2.7

[ ] 3.4 - Verify all 3 files updated correctly
Command: grep -r "[your-actual-url]" spark-setup/spark-frontend/

[ ] 3.5 - Commit frontend URL changes
Command: git add spark-setup/spark-frontend/ && git commit -m "Update frontend backend URLs"

[ ] 3.6 - Push to GitHub
Command: git push origin main

═══════════════════════════════════════════════════════════
PART 4: FRONTEND DEPLOYMENT (Vercel)
═══════════════════════════════════════════════════════════

[ ] 4.1 - Set Vercel environment variables
Go to: Vercel Dashboard > Settings > Environment Variables
Add: REACT_APP_API_URL = [your backend URL with https://]
Add: REACT_APP_WS_URL = [your backend URL with wss://]
Add: NODE_ENV = production

[ ] 4.2 - Trigger Vercel deployment
Auto: Push to main triggers deployment
OR Manual: Click "Deploy" in Vercel dashboard

[ ] 4.3 - Monitor Vercel build logs
Expected: "Build successful" after 2-3 minutes

[ ] 4.4 - Get frontend URL
Format: https://[project-name].vercel.app
Write it here: ________________________________

═══════════════════════════════════════════════════════════
PART 5: INTEGRATION TESTING
═══════════════════════════════════════════════════════════

[ ] 5.1 - Open frontend URL in browser

[ ] 5.2 - Check browser console for errors
Expected: No CORS errors, no module errors

[ ] 5.3 - Verify network requests go to correct backend
DevTools > Network tab
Should show: Requests to your actual Render URL

[ ] 5.4 - Test login
Use credentials from: spark-setup/spark-backend/config.json
Default: admin / [password from hash]

[ ] 5.5 - Verify dashboard loads

[ ] 5.6 - Check WebSocket connection
Console should show: WebSocket connection established

[ ] 5.7 - Verify no devices show initially
Dashboard should display: "0 Total Devices"

═══════════════════════════════════════════════════════════
DEPLOYMENT COMPLETE ✓
═══════════════════════════════════════════════════════════

Backend URL: ________________________________
Frontend URL: ________________________________
Status: [ ] Working [ ] Needs fixes